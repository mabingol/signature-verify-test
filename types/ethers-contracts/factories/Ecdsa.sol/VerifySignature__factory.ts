/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { VerifySignature, VerifySignatureInterface } from "../../Ecdsa.sol/VerifySignature.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "expectedSigner",
        "type": "address"
      },
      {
        "internalType": "bytes32",
        "name": "m",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "r",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "s",
        "type": "bytes32"
      }
    ],
    "name": "measureVerify",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "cold",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "warm",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "expectedSigner",
        "type": "address"
      },
      {
        "internalType": "bytes32",
        "name": "m",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "r",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "s",
        "type": "bytes32"
      }
    ],
    "name": "verifyHash",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "expectedSigner",
        "type": "address"
      },
      {
        "internalType": "bytes32",
        "name": "m",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "r",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "s",
        "type": "bytes32"
      }
    ],
    "name": "verifyPersonalSign",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "expectedSigner",
        "type": "address"
      },
      {
        "internalType": "bytes32",
        "name": "domainSeparator",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "structHash",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "r",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "s",
        "type": "bytes32"
      }
    ],
    "name": "verifyTypedData",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "pure",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600e575f5ffd5b50610ab48061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c806325b5db331461004e578063832033061461007e578063a91cf31f146100ae578063bb11c276146100df575b5f5ffd5b61006860048036038101906100639190610575565b61010f565b6040516100759190610606565b60405180910390f35b6100986004803603810190610093919061061f565b610135565b6040516100a59190610606565b60405180910390f35b6100c860048036038101906100c3919061061f565b61014c565b6040516100d692919061069b565b60405180910390f35b6100f960048036038101906100f4919061061f565b6102ea565b6040516101069190610606565b60405180910390f35b5f5f61011b868661030e565b905061012987828686610340565b91505095945050505050565b5f61014285858585610340565b9050949350505050565b5f5f5f5a90503073ffffffffffffffffffffffffffffffffffffffff1663bb11c276888888886040518563ffffffff1660e01b815260040161019194939291906106e0565b602060405180830381865afa1580156101ac573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101d0919061074d565b61020f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610206906107d2565b60405180910390fd5b5f5a90503073ffffffffffffffffffffffffffffffffffffffff1663bb11c276898989896040518563ffffffff1660e01b815260040161025294939291906106e0565b602060405180830381865afa15801561026d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610291919061074d565b6102d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c79061083a565b60405180910390fd5b5f5a90508183039450808203935050505094509492505050565b5f5f6102f5856104b5565b905061030386828686610340565b915050949350505050565b5f82826040516020016103229291906108cc565b60405160208183030381529060405280519060200120905092915050565b5f5f835f1c90505f835f1c90505f82148061035a57505f81145b8061038457507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a081115b15610393575f925050506104ad565b8673ffffffffffffffffffffffffffffffffffffffff16600187601b88886040515f81526020016040526040516103cd9493929190610950565b6020604051602081039080840390855afa1580156103ed573d5f5f3e3d5ffd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff160361041d576001925050506104ad565b8673ffffffffffffffffffffffffffffffffffffffff16600187601c88886040515f815260200160405260405161045794939291906109cc565b6020604051602081039080840390855afa158015610477573d5f5f3e3d5ffd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16036104a7576001925050506104ad565b5f925050505b949350505050565b5f816040516020016104c79190610a59565b604051602081830303815290604052805190602001209050919050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610511826104e8565b9050919050565b61052181610507565b811461052b575f5ffd5b50565b5f8135905061053c81610518565b92915050565b5f819050919050565b61055481610542565b811461055e575f5ffd5b50565b5f8135905061056f8161054b565b92915050565b5f5f5f5f5f60a0868803121561058e5761058d6104e4565b5b5f61059b8882890161052e565b95505060206105ac88828901610561565b94505060406105bd88828901610561565b93505060606105ce88828901610561565b92505060806105df88828901610561565b9150509295509295909350565b5f8115159050919050565b610600816105ec565b82525050565b5f6020820190506106195f8301846105f7565b92915050565b5f5f5f5f60808587031215610637576106366104e4565b5b5f6106448782880161052e565b945050602061065587828801610561565b935050604061066687828801610561565b925050606061067787828801610561565b91505092959194509250565b5f819050919050565b61069581610683565b82525050565b5f6040820190506106ae5f83018561068c565b6106bb602083018461068c565b9392505050565b6106cb81610507565b82525050565b6106da81610542565b82525050565b5f6080820190506106f35f8301876106c2565b61070060208301866106d1565b61070d60408301856106d1565b61071a60608301846106d1565b95945050505050565b61072c816105ec565b8114610736575f5ffd5b50565b5f8151905061074781610723565b92915050565b5f60208284031215610762576107616104e4565b5b5f61076f84828501610739565b91505092915050565b5f82825260208201905092915050565b7f636f6c64206661696c00000000000000000000000000000000000000000000005f82015250565b5f6107bc600983610778565b91506107c782610788565b602082019050919050565b5f6020820190508181035f8301526107e9816107b0565b9050919050565b7f7761726d206661696c00000000000000000000000000000000000000000000005f82015250565b5f610824600983610778565b915061082f826107f0565b602082019050919050565b5f6020820190508181035f83015261085181610818565b9050919050565b5f81905092915050565b7f19010000000000000000000000000000000000000000000000000000000000005f82015250565b5f610896600283610858565b91506108a182610862565b600282019050919050565b5f819050919050565b6108c66108c182610542565b6108ac565b82525050565b5f6108d68261088a565b91506108e282856108b5565b6020820191506108f282846108b5565b6020820191508190509392505050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f61093a61093561093084610902565b610917565b61090b565b9050919050565b61094a81610920565b82525050565b5f6080820190506109635f8301876106d1565b6109706020830186610941565b61097d60408301856106d1565b61098a60608301846106d1565b95945050505050565b5f819050919050565b5f6109b66109b16109ac84610993565b610917565b61090b565b9050919050565b6109c68161099c565b82525050565b5f6080820190506109df5f8301876106d1565b6109ec60208301866109bd565b6109f960408301856106d1565b610a0660608301846106d1565b95945050505050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f82015250565b5f610a43601c83610858565b9150610a4e82610a0f565b601c82019050919050565b5f610a6382610a37565b9150610a6f82846108b5565b6020820191508190509291505056fea26469706673582212208ad44638f13402602a4a61a27f51a8a22001042fcfe94f2afc8969d2581bca7364736f6c634300081d0033";

  
      type VerifySignatureConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: VerifySignatureConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class VerifySignature__factory extends ContractFactory {
    
      constructor(...args: VerifySignatureConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<VerifySignature & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): VerifySignature__factory {
      return super.connect(runner) as VerifySignature__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): VerifySignatureInterface {
      return new Interface(_abi) as VerifySignatureInterface;
    }
    
    override attach(address: string | Addressable): VerifySignature {
      return super.attach(address) as VerifySignature;
    }
  static connect(address: string, runner?: ContractRunner | null): VerifySignature {
      return new Contract(address, _abi, runner) as unknown as VerifySignature;
    }
  }

  
  