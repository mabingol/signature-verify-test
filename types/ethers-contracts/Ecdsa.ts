/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface EcdsaInterface extends Interface {
    getFunction(nameOrSignature: "measureVerify" | "verifyHash" | "verifyPersonalSign" | "verifyTypedData"): FunctionFragment;

    

    encodeFunctionData(functionFragment: 'measureVerify', values: [AddressLike, BigNumberish, BytesLike, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'verifyHash', values: [AddressLike, BytesLike, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'verifyPersonalSign', values: [AddressLike, BigNumberish, BytesLike, BytesLike, BytesLike]): string;
encodeFunctionData(functionFragment: 'verifyTypedData', values: [AddressLike, BytesLike, BytesLike, BytesLike, BytesLike]): string;

    decodeFunctionResult(functionFragment: 'measureVerify', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyHash', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyPersonalSign', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyTypedData', data: BytesLike): Result;
  }

  

  export interface Ecdsa extends BaseContract {
    
    connect(runner?: ContractRunner | null): Ecdsa;
    waitForDeployment(): Promise<this>;

    interface: EcdsaInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    measureVerify: TypedContractMethod<
      [expectedSigner: AddressLike, v: BigNumberish, m: BytesLike, r: BytesLike, s: BytesLike, ],
      [[bigint, bigint] & {cold: bigint, warm: bigint }],
      'view'
    >
    

    
    verifyHash: TypedContractMethod<
      [expectedSigner: AddressLike, m: BytesLike, r: BytesLike, s: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    verifyPersonalSign: TypedContractMethod<
      [expectedSigner: AddressLike, v: BigNumberish, m: BytesLike, r: BytesLike, s: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    verifyTypedData: TypedContractMethod<
      [expectedSigner: AddressLike, domainSeparator: BytesLike, structHash: BytesLike, r: BytesLike, s: BytesLike, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'measureVerify'): TypedContractMethod<
      [expectedSigner: AddressLike, v: BigNumberish, m: BytesLike, r: BytesLike, s: BytesLike, ],
      [[bigint, bigint] & {cold: bigint, warm: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'verifyHash'): TypedContractMethod<
      [expectedSigner: AddressLike, m: BytesLike, r: BytesLike, s: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'verifyPersonalSign'): TypedContractMethod<
      [expectedSigner: AddressLike, v: BigNumberish, m: BytesLike, r: BytesLike, s: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'verifyTypedData'): TypedContractMethod<
      [expectedSigner: AddressLike, domainSeparator: BytesLike, structHash: BytesLike, r: BytesLike, s: BytesLike, ],
      [boolean],
      'view'
    >;

    

    filters: {
      
    };
  }